#!/usr/bin/env bash
set -euo pipefail

# ./run install
if [ "$1" == "install" ]; then
    python3 -m pip install --user -r requirements.txt
    exit 0

# ./run test
elif [ "$1" == "test" ]; then
    # Run pytest and capture exit code
    python3 -m pytest --maxfail=1 --disable-warnings -q \
        --cov=src/scorer/metrics --cov-report=term \
        --json-report --json-report-file=pytest-report.json > pytest.out 2>&1
    PYTEST_EXIT_CODE=$?
    
    # Extract coverage percentage from TOTAL line
    COVERAGE=$(grep -E '^TOTAL\s+' pytest.out | awk '{print $4}' | sed 's/%//')
    [ -z "$COVERAGE" ] && COVERAGE=0
    
    # Count tests passed
    PASSED=$(grep -E '[0-9]+ passed' pytest.out | grep -Eo '[0-9]+' | head -1)
    [ -z "$PASSED" ] && PASSED=0
    
    # Count tests failed (if any)
    if grep -E '[0-9]+ failed' pytest.out > /dev/null 2>&1; then
        FAILED=$(grep -E '[0-9]+ failed' pytest.out | grep -Eo '[0-9]+' | head -1)
    else
        FAILED=0
    fi
    
    # Calculate total tests
    TOTAL=$((PASSED + FAILED))
    
    # Print summary
    echo "$PASSED/$TOTAL test cases passed. $COVERAGE% line coverage achieved."
    
    # Check if coverage meets minimum requirement (80%)
    if [ "$COVERAGE" -ge 80 ]; then
        exit $PYTEST_EXIT_CODE
    else
        exit 1
    fi

# ./ run URL_FILE
else
    URL_FILE="$1"
    if [ ! -f "$URL_FILE" ]; then
        echo "Error: File not found: $URL_FILE"
        exit 1
    fi
    python3 src/scorer/cli_updated.py "$URL_FILE"
    exit 0
fi